#######################################
#          Remapping/Binding          #
#######################################
#{{{
    set-option -g default-terminal "tmux-256color"
    set-option -sa terminal-overrides ",tmux-256color*:Tc"
    set-option -g default-command bash
    #remap prefix key from Ctrl-b to Ctrl-a
    unbind-key C-b
    #-g option makes global change
    set-option -g prefix C-a
    #Needed for nested sessions
    bind-key C-a send-prefix

    #open new windows after current, not at end
    unbind-key c        ;       bind-key c new-window -a -t *

    #better splitting than " and %
    #make panes open in current dir
    bind-key v split-window -h -c '#{pane_current_path}'
    bind-key h split-window -v -c '#{pane_current_path}'

    #easier pane movement with Ctrl-<vim movement>
    #-n option says prefix is not needed
    bind-key -n C-h select-pane -L
    bind-key -n C-l select-pane -R
    bind-key -n C-k select-pane -U
    bind-key -n C-j select-pane -D

    #easier pane resize with Alt-<vim movement>
    bind-key -n M-k resize-pane -U
    bind-key -n M-j resize-pane -D
    bind-key -n M-h resize-pane -L
    bind-key -n M-l resize-pane -R

    #bind <Alt>-Shift-(q/e) to change windows
    bind-key -n M-q previous-window
    bind-key -n M-e next-window

    #make vi key bindings in copy mode
    setw -g mode-keys vi

    #get rid of this mouse nonsense
    set-option -g mouse off

    #ESC is killing my flow in vim
    #apparently tmux waits for esc seq
    set -sg escape-time 0

    #quick edit todo
    bind-key e new-window "vim ~/.todo"

    # Call script to simulate VSCode's C-`
    bind-key -n C-\\ run-shell -b "$HOME/.tmux/zoom_or_term"
#}}}

#######################################
#             Status Bar              # 
#######################################
#{{{
    set-option -g status on
    set-option -g status-style bg=colour0
    set-option -ag status-style fg=colour23,bold

    # Make status bar refresh every 60 seconds instead of 15
    set-option -g status-interval 60
    # Prevent dumb truncation of my execessive status
    set-option -g status-right-length 90

    # Left side just workspace name
    set-option -g status-left " [#[fg=colour5,bold]#S#[default]] "
    # Middle window list
    set-option -g window-status-separator " "
    set-option -g window-status-current-style "fg=colour2,bold"
    set-option -g window-status-last-style "fg=colour1,bold"
    set-option -g window-status-current-format "#W"
    set-option -g window-status-format "#W"
    # Make right side of status bar have git branch, batt, and time/date
    set-option -g status-right "#[fg=colour2,bold]#(~/.tmux/ip)"
    set-option -ag status-right " #[default]| #(~/.tmux/get_power_color)#(~/.tmux/ac_check)#(~/.tmux/bat)%"
    set-option -ag status-right " #[default]| #[fg=colour13,bold]%m/%d/%Y #[fg=colour31,bold]%H:%M"
    set-option -ag status-right " #[default]| #[fg=colour1,bold]#(~/.tmux/branch #{pane_current_path}) "
#}}}

#######################################
#           Miscellaneous             # 
#######################################
#{{{
    # CoLOrS
    #prevent auto-renaming of windows, I want my names
    set-option -g allow-rename off
    #quick sourcing of this file '~.tmux.conf' for quick setting edits
    #second phrase prints message at status line to let me know it worked
    bind-key r source-file ~/.tmux/conf \; display-message "tmux.conf reloaded."

    #vim-tmux-navigator things 5 commands are up, left, down, right, and previous panes
    is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
    bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
    bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
    bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
    bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
    #bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
    bind-key -T copy-mode-vi C-h select-pane -L
    bind-key -T copy-mode-vi C-j select-pane -D
    bind-key -T copy-mode-vi C-k select-pane -U
    bind-key -T copy-mode-vi C-l select-pane -R
    #bind-key -T copy-mode-vi C-\ select-pane -l

    set -g focus-events on
#}}}

# vim: set foldmethod=marker:
